from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout,
                                 QHBoxLayout, QLabel, QPushButton,
                                 QFileDialog, QListWidget, QMenuBar,
                                 QStatusBar, QAction, QMessageBox,
                                 QLineEdit, QToolBar)
from PyQt5.QtCore import Qt, QPoint
from PyQt5.QtGui import QImage, QPixmap, QPainter, QPen
import numpy as np
import os
from PIL import Image

class MarkupToolWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑–º–µ—Ç–∫–∏")
        self.setGeometry(100, 100, 1200, 800)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.image = None
        self.image_path = None
        self.drawing = False
        self.annotations = []
        self.start_point = QPoint()
        self.end_point = QPoint()
        self.scale_factor = 1.0

        self.create_widgets()
        self.create_menu()
        self.create_toolbar()

        self.statusBar().showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def create_widgets(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –ì–ª–∞–≤–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout
        layout = QHBoxLayout(central_widget)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_label = QLabel()
        self.image_label.setMinimumSize(800, 600)
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setStyleSheet("background-color: #f0f0f0; border: 1px solid #ccc;")
        self.image_label.setText("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        layout.addWidget(self.image_label)

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_panel = QWidget()
        info_panel.setMaximumWidth(300)
        info_layout = QVBoxLayout(info_panel)

        info_title = QLabel("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ç–∫–µ")
        info_title.setStyleSheet("font-weight: bold; font-size: 14px;")
        info_layout.addWidget(info_title)

        # –°–ø–∏—Å–æ–∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        self.anno_list = QListWidget()
        info_layout.addWidget(self.anno_list)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        delete_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ")
        delete_btn.clicked.connect(self.delete_selected)
        info_layout.addWidget(delete_btn)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")
        clear_btn.clicked.connect(self.clear_annotations)
        info_layout.addWidget(clear_btn)

        layout.addWidget(info_panel)

    def create_menu(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        menubar = self.menuBar()

        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = menubar.addMenu("–§–∞–π–ª")

        open_action = QAction("–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", self)
        open_action.setShortcut("Ctrl+O")
        open_action.triggered.connect(self.open_image)
        file_menu.addAction(open_action)

        save_action = QAction("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É", self)
        save_action.setShortcut("Ctrl+S")
        save_action.triggered.connect(self.save_annotations)
        file_menu.addAction(save_action)

        file_menu.addSeparator()

        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.setShortcut("Ctrl+Q")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # –ú–µ–Ω—é "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
        tools_menu = menubar.addMenu("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")

        clear_action = QAction("–û—á–∏—Å—Ç–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É", self)
        clear_action.triggered.connect(self.clear_annotations)
        tools_menu.addAction(clear_action)

        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        help_menu = menubar.addMenu("–ü–æ–º–æ—â—å")

        about_action = QAction("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)

    def create_toolbar(self):
        toolbar = QToolBar()
        self.addToolBar(toolbar)

        # –ö–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        open_btn = QAction("üìÅ –û—Ç–∫—Ä—ã—Ç—å", self)
        open_btn.triggered.connect(self.open_image)
        toolbar.addAction(open_btn)

        save_btn = QAction("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self)
        save_btn.triggered.connect(self.save_annotations)
        toolbar.addAction(save_btn)

        toolbar.addSeparator()

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª–∞—Å—Å–∞
        toolbar.addWidget(QLabel("–ö–ª–∞—Å—Å –æ–±—ä–µ–∫—Ç–∞:"))
        self.class_input = QLineEdit()
        self.class_input.setMaximumWidth(150)
        self.class_input.setText("object")
        self.class_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –æ–±—ä–µ–∫—Ç–∞")
        toolbar.addWidget(self.class_input)

    def open_image(self):
        file_name, _ = QFileDialog.getOpenFileName(
            self, "–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            "",
            "Image files (*.jpg *.jpeg *.png *.bmp *.gif *.tiff *.webp)")

        if file_name:
            self.image_path = file_name
            self.load_image()

    def load_image(self):
        if not self.image_path:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                              "–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        if not os.path.exists(self.image_path):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞",
                              f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.image_path}")
            self.statusBar().showMessage("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º PIL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)
            pil_image = Image.open(self.image_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if pil_image.mode != 'RGB':
                pil_image = pil_image.convert('RGB')

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ numpy array
            self.image = np.array(pil_image)

            if self.image is not None:
                self.display_image()
                self.statusBar().showMessage(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {os.path.basename(self.image_path)}")
                # –û—á–∏—â–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                self.annotations = []
                self.update_annotations_list()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞",
                                  "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                self.statusBar().showMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞",
                                 f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n{str(e)}")
            self.statusBar().showMessage(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

    def display_image(self):
        if self.image is not None:
            try:
                height, width, channel = self.image.shape
                bytes_per_line = 3 * width

                # –°–æ–∑–¥–∞–µ–º QImage –∏–∑ numpy array
                q_image = QImage(self.image.data, width, height,
                               bytes_per_line, QImage.Format_RGB888)
                pixmap = QPixmap.fromImage(q_image)

                # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä label
                label_size = self.image_label.size()
                scaled_pixmap = pixmap.scaled(label_size,
                                            Qt.KeepAspectRatio,
                                            Qt.SmoothTransformation)

                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                self.scale_factor = min(label_size.width() / width, 
                                      label_size.height() / height)

                self.image_label.setPixmap(scaled_pixmap)

            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞",
                                     f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n{str(e)}")
                self.statusBar().showMessage(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    def mousePressEvent(self, event):
        if (self.image is not None and 
            event.button() == Qt.LeftButton and 
            self.image_label.geometry().contains(event.pos())):

            self.drawing = True
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ image_label
            relative_pos = event.pos() - self.image_label.pos()
            self.start_point = relative_pos
            self.end_point = self.start_point

    def mouseMoveEvent(self, event):
        if (self.drawing and 
            self.image_label.geometry().contains(event.pos())):

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ image_label
            relative_pos = event.pos() - self.image_label.pos()
            self.end_point = relative_pos
            self.update()

    def mouseReleaseEvent(self, event):
        if (self.drawing and 
            event.button() == Qt.LeftButton and
            self.image_label.geometry().contains(event.pos())):

            self.drawing = False

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ image_label
            relative_pos = event.pos() - self.image_label.pos()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–º–µ–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            if (abs(relative_pos.x() - self.start_point.x()) > 5 and
                abs(relative_pos.y() - self.start_point.y()) > 5):

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                annotation = {
                    'class': self.class_input.text() or 'object',
                    'start': self.start_point,
                    'end': relative_pos
                }
                self.annotations.append(annotation)
                self.update_annotations_list()
                self.statusBar().showMessage(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è: {annotation['class']}")

            self.update()

    def paintEvent(self, event):
        super().paintEvent(event)
        if self.image is not None:
            painter = QPainter(self)
            painter.setPen(QPen(Qt.red, 2, Qt.SolidLine))

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é image_label
            label_pos = self.image_label.pos()

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            for anno in self.annotations:
                start_x = label_pos.x() + anno['start'].x()
                start_y = label_pos.y() + anno['start'].y()
                end_x = label_pos.x() + anno['end'].x()
                end_y = label_pos.y() + anno['end'].y()

                painter.drawRect(start_x, start_y, 
                               end_x - start_x, end_y - start_y)

                # –†–∏—Å—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫–ª–∞—Å—Å–∞
                painter.setPen(QPen(Qt.red, 1, Qt.SolidLine))
                painter.drawText(start_x, start_y - 5, anno['class'])
                painter.setPen(QPen(Qt.red, 2, Qt.SolidLine))

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
            if self.drawing:
                start_x = label_pos.x() + self.start_point.x()
                start_y = label_pos.y() + self.start_point.y()
                end_x = label_pos.x() + self.end_point.x()
                end_y = label_pos.y() + self.end_point.y()

                painter.setPen(QPen(Qt.blue, 2, Qt.DashLine))
                painter.drawRect(start_x, start_y, 
                               end_x - start_x, end_y - start_y)

    def update_annotations_list(self):
        self.anno_list.clear()
        for i, anno in enumerate(self.annotations):
            width = abs(anno['end'].x() - anno['start'].x())
            height = abs(anno['end'].y() - anno['start'].y())
            self.anno_list.addItem(
                f"{i+1}. {anno['class']} "
                f"[{width}x{height}] "
                f"({anno['start'].x()}, {anno['start'].y()})")

    def delete_selected(self):
        current_row = self.anno_list.currentRow()
        if current_row >= 0:
            deleted_class = self.annotations[current_row]['class']
            del self.annotations[current_row]
            self.update_annotations_list()
            self.update()
            self.statusBar().showMessage(f"–£–¥–∞–ª–µ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è: {deleted_class}")
        else:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                                  "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    def save_annotations(self):
        if not self.annotations:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                              "–ù–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        if not self.image_path:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                              "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        base_name = os.path.splitext(self.image_path)[0]
        default_name = f"{base_name}_annotations.txt"

        file_name, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏",
            default_name,
            "Text files (*.txt);;YOLO format (*.txt);;JSON files (*.json)")

        if file_name:
            try:
                with open(file_name, 'w', encoding='utf-8') as f:
                    for anno in self.annotations:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: class x1 y1 x2 y2
                        f.write(f"{anno['class']} "
                               f"{anno['start'].x()} {anno['start'].y()} "
                               f"{anno['end'].x()} {anno['end'].y()}\n")

                QMessageBox.information(self, "–£—Å–ø–µ—Ö",
                                      f"–ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n{file_name}")
                self.statusBar().showMessage(f"–ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {os.path.basename(file_name)}")

            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞",
                                   f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏:\n{str(e)}")

    def clear_annotations(self):
        if not self.annotations:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                                  "–ù–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
            return

        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                   f"–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ ({len(self.annotations)} —à—Ç.)?",
                                   QMessageBox.Yes | QMessageBox.No)

        if reply == QMessageBox.Yes:
            self.annotations = []
            self.update_annotations_list()
            self.update()
            self.statusBar().showMessage("–í—Å–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")

    def show_about(self):
        QMessageBox.information(
            self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            "–í–µ—Ä—Å–∏—è 1.1\n"
            "¬© 2024 AI Vision Tools\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π\n"
            "‚Ä¢ –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –æ–±—ä–µ–∫—Ç–∞–º\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—É—Ç–µ–π —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π")

if __name__ == "__main__":
    import sys
    from PyQt5.QtWidgets import QApplication

    app = QApplication(sys.argv)
    window = MarkupToolWindow()
    window.show()
    sys.exit(app.exec_())
